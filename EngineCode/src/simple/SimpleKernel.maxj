/**
 * Document: MaxCompiler tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 4      Example: 2      Name: Simple
 * MaxFile name: Simple
 * Summary:
 * 	 Takes a stream and for each value x calculates x^2 + x.
 */
package simple;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain; 

class halftone extends Kernel {
    private static final DFEType floatType = dfeFloat(8, 24);
    
	halftone(KernelParameters parameters, int R_SIZE, int C_SIZE) {
		super(parameters);
        int i, j;
        DFEVar xx, yy, eg_offset, eg_base;
        DFEVar m, n, result ;                

		// Input
		DFEVar rows = io.scalarInput("rows", dfeInt(32));
		DFEVar cols = io.scalarInput("cols", dfeInt(32));
		DFEVar threshold = io.scalarInput("threshold", dfeInt(16));
		DFEVar one = io.scalarInput("one", dfeInt(16));
        DFEVar zero = io.scalarInput("zero", dfeInt(16));
        DFEVar in_image = io.input("in_image", dfeInt(16));
        DFEVar in_eg = io.input("eg", dfeFloat(8, 24));
        DFEVar in_ep = io.input("ep", dfeFloat(8, 24));
        DFEVar CONST_ZERO = constant.var(dfeFloat(8, 24), 0.0);
        DFEVar CONST_INT_ZERO = constant.var(dfeInt(32), 0);


        DFEVar c[][] = new DFEVar[2][3];
        c[0][0] = CONST_ZERO;
        c[0][1] = constant.var(dfeFloat(8, 24), 0.2);
        c[0][2] = CONST_ZERO;
        c[1][0] = constant.var(dfeFloat(8, 24), 0.6);
        c[1][1] = constant.var(dfeFloat(8, 24), 0.1);
        c[1][2] = constant.var(dfeFloat(8, 24), 0.1);

        CounterChain cc = control.count.makeCounterChain();
		m = cc.addCounter(rows.cast(dfeUInt(32)), 1);
		n = cc.addCounter(cols.cast(dfeUInt(32)), 1);

        DFEVar t;
        DFEVar eg = floatType.newInstance(this);
        DFEVar ep = floatType.newInstance(this);
        eg = CONST_ZERO; 
        ep = CONST_ZERO;
        
        //if n-j+1 above col bounds use (n-j + 1 -1) or n-j+2 
        // else use n - j + 1 ==> col offset ==> -1 or 0 or +1 ;since  j <=  
        DFEVar E_CELL_LEFT_OUT = constant.var(dfeInt(32), 100);
        DFEVar E_CELL_RIGHT_OUT = constant.var(dfeInt(32), 101);
        DFEVar E_CELL_DOWN_OUT = constant.var(dfeInt(32), 102);
        DFEVar E_CELL_IN = constant.var(dfeInt(32), 103);
        DFEVar state_r, state_c;

        for(i=0; i<2; i++){
            for(j=0; j<3; j++){
                xx = m.cast(dfeInt(32))-i+1;
                yy = n.cast(dfeInt(32))-j+1;
 
                //calculate stae along coloumns
                state_r = xx < 0 ?E_CELL_DOWN_OUT:xx >= rows.cast(dfeInt(32))? E_CELL_DOWN_OUT:E_CELL_IN ;
                state_c = yy < 0 ?E_CELL_LEFT_OUT:yy >= cols.cast(dfeInt(32))? E_CELL_RIGHT_OUT:E_CELL_IN ;
                
                ep = state_r.eq(E_CELL_DOWN_OUT) & state_c.eq(E_CELL_LEFT_OUT)? 
                        ep + c[i][j] * stream.offset(eg, (-i)*C_SIZE-j+2):
                        state_r.eq(E_CELL_DOWN_OUT) & state_c.eq(E_CELL_RIGHT_OUT)?
                        ep + c[i][j] * stream.offset(eg, (-i)*C_SIZE-j):
                        state_r.eq(E_CELL_DOWN_OUT)?
                        ep + c[i][j] * stream.offset(eg, (-i)*C_SIZE-j+1):
                        state_c.eq(E_CELL_LEFT_OUT)?
                        ep + c[i][j] * stream.offset(eg, (-i+1)*C_SIZE -j+2):
                        state_c.eq(E_CELL_RIGHT_OUT)?
                        ep + c[i][j] * stream.offset(eg, (-i+1)*C_SIZE-j):
                        ep + c[i][j] * stream.offset(eg, (-i+1)*C_SIZE -j+1);
            } /* ends loop over j */
        } /* ends */ 
        
        //ep_carried <== ep;
        t  = in_image.cast(dfeFloat(8, 24)) + ep;
        
        eg = t > threshold.cast(dfeFloat(8, 24)) ? t - threshold.cast(dfeFloat(8, 24))*2: t;
        result = t > threshold.cast(dfeFloat(8, 24)) ? one: zero;
       
       //DFEVar result = in_image;
		// Output
		io.output("out_image", result, dfeInt(16));
	}
}

